#!/usr/bin/perl

#
# Run this script within the indexing directory
# It will create "../Framework/Tools/Script\ Management/LoadScriptsBootstrap.vbs"
# by reading "../Framework/Tools/Script\ Management/LoadScripts.vbs" and inlining all the scripts.
# LoadScriptsBootstrap.vbs will auto-load for LoadScripts.vbs and all the included scripts.
# Requires Sparx EA Local Path defined just like LoadScripts.vbs does.
#

use strict;
use Data::Dumper;

use File::Basename;
use File::Find;

my %incToPath = ();

sub addVbsFileToMapping
{
    my $fullpath = $File::Find::name;
    my $filename = $_;

    my($basename, $dirs, $suffix) = fileparse($fullpath, qr/\.[^.]*/);
    return unless $suffix eq ".vbs";

    open(my $fh, '<:encoding(UTF-8):crlf', $filename)
        or die "Could not open file '${filename}' $!";

    my $group = "";
    while (my $line = <$fh>) {
        chomp $line;
        if ($line =~ m/^'\[group=/) {
            $group = $line =~ s/'\[group=//r;
            $group =~ s/]//;
            last;
        }
    }

    close($fh)
        or warn "Error closing file '${filename}'";

    return unless $group ne "";

    ${incToPath}{"!INC ${group}\.${basename}"} = ${fullpath};
}

sub inlineScript
{
    my ($outputFH, $scriptFilePath, $inlinedAlreadyHashRef) = @_;

    open(my $fh, '<:encoding(UTF-8):crlf', $scriptFilePath)
        or die "Could not open file '${scriptFilePath}' $!";

    print $outputFH <<"BEGIN_INCLUDE_HEADER";
'
' #######################
' BEGIN: ${scriptFilePath}

BEGIN_INCLUDE_HEADER

    while (my $line = <$fh>) {
        chomp $line;
        # Online inline includes that we have scripts for, everything else is left alone.
        if ($line =~ m/^!INC/ && exists $incToPath{$line}) {
            if (exists ${$inlinedAlreadyHashRef}{$line})
            {
                # Do nothing for already inlined script
                print $outputFH ("' Already inlined ${line}", "\n");
            }
            else {
                ${$inlinedAlreadyHashRef}{$line} = $incToPath{$line};
                inlineScript($outputFH, $incToPath{$line}, \%{$inlinedAlreadyHashRef});
            }
        }
        elsif ($line =~ m/^main/) {
            # Ignore the call to main
            # As this is the bootstrap script, and we will later include loading all the scripts required
        }
        else {
            print $outputFH ($line, "\n");
        }
    }
    print $outputFH  <<"END_INCLUDE_HEADER";
'
' END: ${scriptFilePath}
' #######################

END_INCLUDE_HEADER

    close($fh)
        or warn "Error closing file '${scriptFilePath}'";
}

#
# Converts the relative file local paths (from within indexing and so prefixed with "..")
# to be relative to the root so that the Local Path variable "scriptFolder" can be prefixed later
# This just removes the .. from the path
#
sub convertLocalPathToScriptPath
{
    my ($localPath) = @_;

    my $convertedPath = $localPath =~ s/\.\.//r;
    return $convertedPath;
}

sub inlineLoadScript
{
    my $loadScript = "../Framework/Tools/Script\ Management/LoadScripts.vbs";
    my $loadScriptBootstrap = "../Framework/Tools/Script\ Management/LoadScriptsBootstrap.vbs";

    die "Can't create inlined bootstrap for missing file: ${loadScript}" unless ( -e $loadScript );

    my %inlinedAlready = ();

    open(my $output, '>:encoding(UTF-8):crlf', $loadScriptBootstrap)
        or die "Could not open file '${loadScriptBootstrap}' $!";

    print $output <<"AUTOGENERATED_WARNING_END";
'////////////////////////////////////////////////////////
'              THIS SCRIPT IS AUTOGENERATED
'     by indexing/create_LoadScriptsBootstrap_vbs.pl
'                     DO NOT MODIFY
'////////////////////////////////////////////////////////

AUTOGENERATED_WARNING_END

    inlineScript($output, $loadScript, \%inlinedAlready);

    my @filesToLoad = values %inlinedAlready;
    push(@filesToLoad, "../Framework/Tools/Script\ Management/LoadScripts.vbs");

    print $output ("dim fileToLoad\n");
    foreach my $file (@filesToLoad) {
        # Convert from Unix paths to Dos Paths
        $file = $file =~ s!/!\\!gr;
        my $scriptPath = convertLocalPathToScriptPath($file);
        print $output ("set fileToLoad = new TextFile\n");
        print $output ("fileToLoad.FullPath = scriptsFolder & \"${scriptPath}\"\n");
        print $output ("fileToLoad.loadContents()\n");
        print $output ("getScriptFromFile(fileToLoad)\n");
    }

    print $output ("Session.output \"LoadScriptsBootstrap: finished.\"\n");

    close($output)
        or warn "Error closing file '${loadScriptBootstrap}'";
}

# Build incToPath
find(\&addVbsFileToMapping, "..");
inlineLoadScript();
